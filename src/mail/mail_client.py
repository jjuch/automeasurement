from smtplib import SMTP_SSL
from email.message import EmailMessage

class MailClient():
    def __init__(self, host: str, port: int, user: str, pswd: str):
        self.client = SMTP_SSL(host=host, port=port)
        self.client.set_debuglevel(1)
        self.client.login(user, pswd)


    def send_email(self, from_email: str, to_email: list, subject: str, body: str, cc_email: list=None, high_priority: bool=False):
        """
        Set headers and send email for all email functions.
        """
        # Create Email Message instance with header
        msg = EmailMessage()
        msg['Subject'] = subject
        msg['From'] = from_email
        msg['To'] = to_email
        if high_priority:
            msg['X-Priority'] = "1"
        msg.set_content(body)
        all_to_email = to_email
        if cc_email is not None:
            msg['Cc'] = cc_email
            all_to_email = all_to_email + cc_email

        # Send email
        self.client.sendmail(from_email, all_to_email, msg.as_string())
        
    def send_test_email(self, from_email: str, to_email: list, cc_email: list=None):
        """
        Send a test mail with the current server.
        """
        
        # Create subject
        subject = '[Measurements.dysc] testprotocol'

        # Add body to email
        body = ("From: %s\r\nTo: %s\r\n\r\n" % (from_email, ", ".join(to_email)))
        body = body + "This is a test.\r\n\r\nDisclaimer: this mail is sent using a Python SMTP_SSL client. If you no longer want to receive this e-mail, send a reply to 'measurements.dysc@UGent.be'."
        
        self.send_email(from_email, to_email, subject, body, cc_email=cc_email)



    def send_error_email(self, error_text: str, error_subject: str, from_email: str, to_email: list, cc_email: list=None):
        """
        Send an error mail.
        """
        subject = '[Measurements.dysc] ERROR: {}'.format(error_subject)
        body = """
============================================================     
The following error occurred during the measurement protocol   
============================================================\n
{}\n\n
__________________________________________________________________
This message is automatically generated by the Automeasurement protocol. If it is not clear why you have received this message, please contact 'measurement.dysc@UGent.be'.
        """.format(error_text)

        self.send_email(from_email, to_email, subject, body, cc_email=cc_email, high_priority=True)

    def quit_client(self):
        self.client.quit()

if __name__ == "__main__":
    import config.secrets as cfg

    mc = MailClient(cfg.host, cfg.port, cfg.user, cfg.password)
    mc.send_test(cfg.email_from, cfg.email_to, cc_email=cfg.email_cc)
    mc.quit_client()